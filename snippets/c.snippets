#Licencia gpl
snippet gpl
	/* Licencia GPL
	 * ${1:Nombre Programa}
	 * 
	 *  ${2:Descripcion del Programa}
	 *
	 * Copyright <${3:Fecha}> ${4:Desarrollador} <${5:Correo<at>mail.com}>
	 * 
	 * This program is free software; you can redistribute it and/or modify
	 * it under the terms of the GNU General Public License as published by
	 * the Free Software Foundation; either version 2 of the License, or
	 * (at your option) any later version.
	 * 
	 * This program is distributed in the hope that it will be useful,
	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	 * GNU General Public License for more details.
	 * 
	 * You should have received a copy of the GNU General Public License
	 * along with this program; if not, write to the Free Software
	 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
	 * MA 02110-1301, USA.
	 * 
	 * 
	 */
	 ${6}
#licencia BSD
snippet bsd
	/* Licencia BSD
	 * ${1:Nombre Programa}
	 *
	 *  ${2:Descripcion del Programa}
	 *
	 * Copyright <${3:Fecha}> ${4:Desarrollador} <${5:Correo<at>mail.com}>
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 * 
	 * * Redistributions of source code must retain the above copyright
	 *   notice, this list of conditions and the following disclaimer.
	 * * Redistributions in binary form must reproduce the above
	 *   copyright notice, this list of conditions and the following disclaimer
	 *   in the documentation and/or other materials provided with the
	 *   distribution.
	 * * Neither the name of the  nor the names of its
	 *   contributors may be used to endorse or promote products derived from
	 *   this software without specific prior written permission.
	 * 
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
	 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
	 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
	 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 * 
	 */
	 ${6}
#Licencia FreeBSD
snippet freebsd
	/*-
	 * Copyright (c) ${1:A単o} ${2:Nombre} <${3:Correo@dominio}>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions
	 * are met:
	 * 1. Redistributions of source code must retain the above copyright
	 *    notice, this list of conditions and the following disclaimer.
	 * 2. Redistributions in binary form must reproduce the above copyright
	 *    notice, this list of conditions and the following disclaimer in the
	 *    documentation and/or other materials provided with the distribution.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND
	 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	 * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
	 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
	 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
	 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
	 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
	 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
	 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
	 * SUCH DAMAGE.
	 *
	 * $FreeBSD$
	 */
	 ${4}
#Licencia MIT
snippet mit
# TODO	
# funcion main()
snippet main
	int main(int argc, const char *argv[]){
		${1}
		return 0;
	}
# #include <...>
snippet inc
	#include <${1:stdio}.h>${2}
#snippet Inc
#	#include "${1:`Filename("$1.h")`}"${2}
# #ifndef ... #define ... #endif
snippet ifndef
	#ifndef ${1}
	${2}

snippet define
	#define ${1:Simbolo} ${2:valor}${3}
snippet	endif
	#endif${1}

snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif
snippet #if
	#if ${1:FOO}
		${2}
	#endif
# Header Include-Guard
# (the randomizer code is taken directly from TextMate; it could probably be
# cleaner, I don't know how to do it in vim script)
snippet lib
	#ifndef ${1:`toupper('_'.Filename('', 'UNTITLED').'_H')`}
	#define $1
	
	${2}

	#endif /* Final de la libreria: $1 */
# Condicion if/else
snippet if
	if (${1: Condicion }) {
		${2: Codigo}
	} 
snippet else
	else { 
		${1: Codigo}
	} 
# Tertiary conditional
snippet t
	${1:/* condicion */} ? ${2:Opcion1} : ${3:Opcion2}
# Do while 
snippet do
	do { 
		${2:codigo}
	} while (${1:Condicion});
# While 
snippet while
	while (${1:/* condicion */}) {
		${2:/* codigo */}
	}
# For Loop
snippet for
	for (${2:i} = 0;  $2 < ${1:contador}; $2${3:++}) {
		${4:/* codigo */}	
	}	 
# Custom For Loop
snippet forr
	for (${1:i} = ${2: 0}; ${3:$1 < 10}; $1${4:++}) {
		${5:/* codigo */}
	} 
#Como parte importante de switch case tendra su propio snippet
#switch
snippet switch
	switch (${1:/* condicion  */})
	{
	  	${2:/* casos */}
		default:
	}
# Funcion
snippet case
	case: $1 
# Snippets con documentacion para spinx
snippet docfun
	/**
	* $2() - Descripcion de la funcion
	*
	* @$3: Descripcion argumento
	*
	* Descripcion larga
	* 
	* Retorno: Descripcion del valor de retorno
	*/
	${1:void} ${2:nombre funcion}(${3:parametros})
	{
		${4:/* codigo */}
	}

snippet docstr
	/**
	* struct $1 - Descripcion de la estructura
	* @$2 - 
	*
	*/
	struct ${1:nombre_structura} {
		${2:tipo} ${3nombre};
	};

snippet doctip
	/**
	* $2: Descripcion del tipo
	*/
	${1:tipo} ${2:nombre};

snippet doctyp
	/**
	* typedef $2 - Descripcion corta
	* 
	* Descripcion detallada del typedef
	*/
	typedef ${1:tipo} ${2:nombre};
	
snippet fund
	${1:void} ${2:function_name}(${3});
	${4} 
# Typedef
snippet typedef
	typedef ${1:int} ${2:Mi Tipo predefinido};
# Struct
snippet struct
	struct ${1:nombre_structura} {
		${2}
	$;
#union 
snippet union
	union ${1:nombre_union}{
		${2:/* datos */}
	}${3:numero}
# Typedef struct
snippet typestr
	typedef struct ${2:_ $1 }{
		${3:/* data */}
	} ${1: `Filename('$1_t', 'name')`};
	
# Typdef enum
snippet tde
	typedef  enum { 
		${1:/* data */}
	}${2:foo};${3}
########################################################
##  Iniciamos con los snippets de la funcion stdio.h  ##
########################################################
#snippet printf
#	printf("${1:/* cadena */}\n"${2});
#	${3}  
#snippet fprintf
#	${1:/*fprintf(salida,"cadena", variable)*/}
#	fprintf(${2:stderr}, "${3:%s}\n"${4});
#	${5}
snippet clearerr
	clearerr(${1:FILE *cadena});
snippet fclose
	fclose(${1:FILE *cadena});
snippet feof
	feof(${1:FILE *cadena});
snippet ferror
	ferror(${1:FILE *cadena});
snippet fflush
	fflush(${1:FILE *cadena});
snippet fgetpos
	fgetpos(${1:FILE *cadena},${2:fpos_t *posision});
snippet fopen
	fopen(${1:const char *archivo},${2:const char *modo});
snippet fread
	fread(${1:void *ptr},${2:size_t tama単o},${3:size_t No.elements},${4:FILE *cadena});
snippet freopen
	freopen(${1:const char *archivo},${2:const char *modo},${3:FILE *cadena});
snippet fseek
	fseek(${1:FILE *cadena},${2:long int offset},${3:int whence});
snippet fsetpos
	fsetpos(${1:FILE *stream,${2:const fpos_t *pos}});
	${3}
snippet ftell
	ftell(${1:FILE *stream});
	${2}
snippet fwrite
	fwrite(${1:const void *apuntador},${2:size_t tama単ano},${3:size_t nmemb},${4:FILE *cadena});
	${5}
snippet remove
	remove(${1:const char *archivo});
	${2}
snippet rename
	rename(${1:const char *Nombre_viejo},${2:const char *Nombre_nuevo});
	${3}
snippet setbuf
	setbuf(${1:FILE *cadena,${2:char *buffer}});
	${2}
snippet setvbuf
	setvbuf(${1:FILE *cadena},${2:char *buffer},${3:int modo},${4:size_t tama単o});
	${5}
snippet tmpfile
	tmpfile(${1:void});
	${2}
snippet fprintf
	fprintf(${1:FILE *cadena},${2:const char *formatos},${3:...});
	${4}
snippet printf
	printf("${1:}\n"${2:});
	${2}
snippet sprintf
	sprintf(${1:char *cadena},${2:const char *format},${3:...});
	${4}
snippet vfprintf
	vfprintf(${1:FILE *cadena},${2:const char *formatos},${3:...});
	${4}
snippet vprintf
	vprintf(${1:const char *formato},${2:va_list arg});
	${3}
snippet vsprintf
	vsprintf(${1:char *cadena},${2:const char *formato},${3:va_list arg});
	${4}
snippet fscanf
	fscanf(${1:FILE *cadena},${2:const char *formato});
	${3}
snippet scanf
	scanf(${1:const char *formato},${2:...});
	${3}
snippet sscanf
	sscanf(${1:const char *cadena},${2:const char *formato});
	${3}
snippet fgetc
	fgetc(${1:FILE *cadena});
	${2}
snippet fgets
	fgets(${1:char *cadena},${2:int n},${3:FILE *cadena});
	${4}
snippet fputc
	fputc(${1:int char},${2:FILE *cadena});
	${3}
snippet fputs
	fputs(${1:const char *cadena},${2:FILE *stream});
	${3}
snippet getc
	getc(${1:FILE *cadena});
	${2}
snippet getchar
	getchar(${1:char *cadena});
	${2}
snippet putc
	putc(${1:int caracter},${2:FILE *cadena});
	${3}
snippet putchar
	putchar(${1:int caracter});
snippet puts
	puts(${1:const char *cadena});
	${2}
snippet ungetc
	ungetc(${1:int char},${2:FILE *cadena});
	${3}
snippet perror
	perror(${1:const char *cadena});
	${2}
########################################################
##    Inician los Snippets de la funcion ctypes.h     ##
########################################################
snippet isalnum
	isalnum(${1:int valor});
	${2}
snippet isalpha
	isalpha(${1:int valor});
	${2}
snippet iscntrl
	iscntrl(${1:int valor});
	${2}
snippet isdigit
	isdigit(${1:int valor});
	${2}
snippet isgraph
	isgraph(${1:int valor});
	${2}
snippet islower
	islower(${1:int valor});
	${2}
snippet isprint
	isprint(${1:int valor});
	${2}
snippet ispunct
	ispunct(${1:int valor});
	${2}
snippet isspace
	isspace(${1:int valor});
	${2}
snippet	isupper
	isupper(${1:int valor});
	${2}
snippet isxdigit
	isxdigit(${1:int valor});
	${2}
############################################################
##   Inicician los snippets de las funciones de math.h	  ##
############################################################
snippet acos
	acos(${1:double valor});
	${2}
snippet asin
	asin(${1:double valor});
	${2}
snippet atan
	atan(${1:double valor});
	${2}
snippet atan2
	atan2(${1:double valor1},${2:double valor2});
	${2}
snippet ceil
	ceil(${1:double valor});
	${2}
snippet cos
	cos(${1:double valor});
	${2}
snippet cosh
	cosh(${1:double valor});
	${2}
snippet exp
	exp(${1:double valor});
	${2}
snippet fabs
	fabs(${1:double valor});
	${2}
snippet floor
	floor(${1:double valor});
	${2}
snippet fmod
	fmod(${1:double valor1},${2:double valor2});
	${2}
snippet frexp
	frexp(${1:double valor},${2:int exponente});
	${2}
snippet ldexp
	ldexp(${1:double x},${2:int exponente});
	${2}
snippet log
	log(${1:double valor});
	${2}
snippet log10
	log10(${1:double valor});
	${2}
snippet modf
	modf(${1:double valor1},${2:double valor2});
	${2}
snippet pow
	pow(${1:double valor},${2:double potencia});
	${2}
snippet sin
	sin(${1:double valor});
	${2}
snippet sinh
	sinh(${1:double valor});
	${2}
snippet sqrt
	sqrt(${1:double valor});
	${2}
snippet tan
	tan(${1:double valor});
	${2}
snippet tanh
	tanh(${1:double valor});
	${2}
############################################################
## 	Inician los Snippets de stdlib.h                  ## 
############################################################
snippet atof
	atof(${1:const char *cadena});
	${2}
snippet atoi
	atoi(${1:const char *cadena});
	${2}
snippet atol
	atol(${1:const char *cadena},${2:char **endptr});
	${3}
snippet strtod
	strtod(${1:const char *cadena},${2:char **endptr});
	${3}
snippet strtol
	strtol(${1:const char *cadena},${2:char **endptr},${3:int base});
	${4}
snippet strtoul
	strtoul(${1:const char *cadena},${2:char **endptr},${3:int base});
	${4}
snippet calloc
	calloc(${1:size_t No.Elementos}, ${2:size_t tam});
	${3}
snippet free
	free(${1:void *apuntador});
	${2}
snippet malloc
	malloc(${1:size_t tam});
	${2}
snippet realloc
	realloc(${1:void *apuntador},${2:size_t tam});
	${3}
snippet abort
	abort(${1:void});
	${2}
snippet atexit
	atexit(${1:void (*funcion)(void)});
	${2}
snippet exit
	exit(${1:int status});
	${2}
snippet getenv
	getenv(${1:const char *name});
	${2}
snippet system
	system(${1:const char *cadena});
	${2}
snippet bsearch
	bsearch(${1:const void *llave},${2:const void *base},${3:size_t No.Elementos},${4:size_t tam},${5:int (*comparacion)(const void *,const void *)});
	${6}
snippet qsort
	qsort(${1:void *base},${2:size_t No.Elementos},${3:size_t tam},${4:int (*comparacion)(const void *,const void *)});
	${5}
snippet abs
	abs(${1:int valor});
	${2}
snippet div
	div(${1:int numerador},${2:int denominador});
	${3}
snippet labs
	labs(${1:long int valor});
	${2}
snippet ldiv
	ldiv(${1:long int numerador},${2:long int denominador});
	${3}
snippet rand
	rand(${1:void});
	${2}
snippet srand
	srand(${1:unsigned int seed});
	${2}
snippet mblen
	mblen(${1:const char *cadena},${2:size_t numero});
	${3}
snippet mbstowcs
	mbstowcs(${1:schar_t *pwcs}, ${2:const char *cadena},${3:size_t tam});
	${4}
snippet mbtowc
	mbtowc(${1:wchar_t *pwc},${2:const char *cadena},${3:size_t tam});
	${4}
snippet wcstombs
	wcstombs(${1:char *cadena},${2:const wchar_t *pwcs},${3:size_t tam});
	${4}
snippet wctomb
	wctomb(${1:char *cadena},${2:wchar_t wchar});
	${3}
############################################################
##      Inician los Snippets de string.h                  ##
############################################################
snippet memchr
	memchr(${1:const void *cadena},${2:int caracter},${3:size_t tam});
	${4}
snippet memcmp
	memcmp(${1:const void *cadena1},${2:const void *cadena2},${3:size_t tam});
	${4}
snippet memcpy
	memcpy(${1:void *cadena},${2:const void *cadena2},${3:size_t tam});
	${4}
snippet memmove
	memmove(${1:void *cadena1},${2:const void *cadena2},${3:size_t tam});
	${4}
snippet memset
	memset(${1:void *cadena},${2:int caracter},${3:size_t tam});
	${4}
snippet strcat
	strcat(${1:char *cadena1},${2:const char *cadena2});
	${3}
snippet strncat
	strncat(${1:char *cadena1},${2:const char *cadena2},${3:size_t tam});
	${4}
snippet strchr
	strchr(${1:const char *cadena},${2:int caracter});
	${3}
snippet strcmp
	strcmp(${1:const char *cadena1},${2:const char *cadena2});
	${3}
snippet strncmp
	strncmp(${1:const char *cadena1},${2:const char *cadena2},${3:size_t tam});
	${4}
snippet strcoll
	strcoll(${1:const char *cadena1},${2:const char *cadena2});
	${3}
snippet strcpy
	strcpy(${1:char *cadena1},${2:const char *cadena2});
	${3}
snippet strncpy
	strncpy(${1:char *cadena1},${2:const char *cadena2},${3:size_t tam});
	${4}
snippet strcspn
	strcspn(${1:const char *cadena1},${2:const char *cadena2});
	${3}
snippet strerror
	strerror(${1:int errnum});
	${2}
snippet strlen
	strlen(${1:const char *cadena});
	${2}
snippet strpbrk
	strpbrk(${1:const char *cadena1},${2:const char *cadena2});
	${3}
snippet strrchr
	strrchr(${1:const char *cadena},${2:int caracter});
	${3}
snippet strspn
	strspn(${1:const char *cadena1},${2:const char *cadena2});
	${3}
snippet strstr
	strstr(${1:const char cadena1},${2:const char cadena2});
	${3}
snippet strtok
	strtok(${1:char cadena1},${1:const char cadena2});
	${3}
snippet strxfrm
	strxfrm(${1:const char *cadena1},${2:const char *cadena2},${3:size_t tam});
	${4}
############################################################
##           Inician los Snippets de time.h               ##
############################################################
snippet struct_tm
	struct tm{
		int tm_sec${1:<Segundos 0-60>}
		int tm_min${2:<Minutos 0-59>}
		int tm_hour${3:<Horas 0-23>}
		int tm_mday${4:<Dia del Mes 0-11>}
		int tm_mon${5:<Meses de 0-11>}
		int tm_year${6:<Desde 1990>}
		int tm_wday${7:<Dias desde Domingo 0-6>}
		int tm_yday${8:<Dias de Enero desde 0-365>}
		int tm_isdst${9:<Horario Ahorro de Energia>}
	};${10}
snippet asctime
	asctime(${1:const struct tm *ApuntTiempo});
	${2}
snippet clock
	clock(${1:void});
	${2}
snippet ctime
	ctime(${1:const time_t *tiempo});
	${2}
snippet difftime
	difftime(${1:time_t tiempo1},${2:time_t tiempo2});
	${3}
snippet gmtime
	gmtime(${1:const time_t *tiempo});
	${2}
snippet localtime
	localtime(${1:const time_t *tiempo});
	${2}
snippet mktime
	mktime(${1:struct tm *ApuntTiempo});
	${2}
snippet strftime
	strftime(${1:char *cadena},${2:size_t maxtam},${3:const char *formato},${4:const struct tm ApuntTiempo});
	${5}
snippet time
	time(${1:time_t *tiempo});
	${2}
############################################################
##	     Inician los Snippets de ncurses.h            	  ##
############################################################
############################################################
##         Agregamos otra libreria                        ##
############################################################

###################
##   Variables	 ##
###################
snippet int
	int ${1:variable_entero};
	${2}
snippet float
	float ${1:variable_flotante};
	${2}
snippet char
	char ${1:variable_caracter};
	${2}
snippet	double
	double ${1:variable_double}
snippet long
	long ${1:variable_double}
snippet unsigned
	unsigned ${1}
snippet signed
	signed ${1}
snippet void
	void
