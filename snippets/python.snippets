# Licencia GPL
snippet gpl
	""" Licencia GPL
	${1:Nombre Programa}
	
	${2:Descripcion del Programa}
	
	Copyright <${3:Fecha}> ${4:Desarrollador} <${5:Correo<at>mail.com}>
	
	This program is free software; you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation; either version 2 of the License, or
	(at your option) any later version.
	
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.
	
	You should have received a copy of the GNU General Public License	
	along with this program; if not, write to the Free Software
	Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
	MA 02110-1301, USA.
	"""
# ShellBang
snippet #!
	#!/usr/bin/python3
snippet #
	# ${1:Comentario}
# Importar modulos
snippet imp
	import ${1:module}
# Moldulos por especiales
snippet from
	from ${1:Modulo} import ${2:Libreria}
# Module Docstring
snippet docs
	'''
	File: ${1:`Filename('$1.py', 'foo.py')`}
	Author: ${2:`g:snips_author`}
	Description: ${3}
	'''
snippet while
	while ${1:condicion}:
		${2:# Codigo}
snippet for
	for ${1:needle} in ${2:haystack}:
		${3:# code...}
# New Class
snippet class
	class ${1:Nombre de la Clase}(${2:objetos}):
		"""${3:docstring fori $1}"""
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4
			${6}
# New Function
snippet def
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		"""${3:docstring for $1}"""
		${4:pass}
snippet deff
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		${3}
# New Method
snippet defs
	def ${1:mname}(self, ${2:arg}):
		${3:pass}
# New Property
snippet property
	def ${1:foo}():
		doc = "${2:The $1 property.}"
		def fget(self):
			${3:return self._$1}
		def fset(self, value):
			${4:self._$1 = value}
# Lambda
snippet lambda
	${1:variable} = lambda ${2:variables} : ${3:accion}
snippet .
	self.${1}
snippet try Try/Except
	try:
		${1:pass}
	except ${2:Excepcion}, ${3:e}:
		${4:raise $3}
snippet try Try/Except/Else
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
snippet try Try/Except/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	finally:
		${5:pass}
snippet try Try/Except/Else/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
	finally:
		${6:pass}
# if __name__ == '__main__':
snippet ifmain
	if __name__ == '__main__':
		${1:main()}
# __magic__
snippet _
	__${1:init}__${2}
snippet print
	print ("${1}")
snippet input
	input("${1:Texto}")
snippet raw_input
	raw_input("${1:Texto}")	
